// Generated by @wagmi/cli@1.0.0 on 6/30/2023 at 1:08:22 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// JBProjects
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const jbProjectsABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_operatorStore',
        internalType: 'contract IJBOperatorStore',
        type: 'address',
      },
    ],
  },
  { type: 'error', inputs: [], name: 'UNAUTHORIZED' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'metadata',
        internalType: 'struct JBProjectMetadata',
        type: 'tuple',
        components: [
          { name: 'content', internalType: 'string', type: 'string' },
          { name: 'domain', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Create',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'fromDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'toDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'previousBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'metadata',
        internalType: 'struct JBProjectMetadata',
        type: 'tuple',
        components: [
          { name: 'content', internalType: 'string', type: 'string' },
          { name: 'domain', internalType: 'uint256', type: 'uint256' },
        ],
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SetMetadata',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'resolver',
        internalType: 'contract IJBTokenUriResolver',
        type: 'address',
        indexed: true,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SetTokenUriResolver',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'count',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      {
        name: '_metadata',
        internalType: 'struct JBProjectMetadata',
        type: 'tuple',
        components: [
          { name: 'content', internalType: 'string', type: 'string' },
          { name: 'domain', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'createFor',
    outputs: [{ name: 'projectId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'metadataContentOf',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'operatorStore',
    outputs: [
      { name: '', internalType: 'contract IJBOperatorStore', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      {
        name: '_metadata',
        internalType: 'struct JBProjectMetadata',
        type: 'tuple',
        components: [
          { name: 'content', internalType: 'string', type: 'string' },
          { name: 'domain', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'setMetadataOf',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_newResolver',
        internalType: 'contract IJBTokenUriResolver',
        type: 'address',
      },
    ],
    name: 'setTokenUriResolver',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_projectId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tokenUriResolver',
    outputs: [
      {
        name: '',
        internalType: 'contract IJBTokenUriResolver',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// JBProjectCards
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const jbProjectCardsABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_config',
        internalType: 'struct Config',
        type: 'tuple',
        components: [
          { name: 'projects', internalType: 'address', type: 'address' },
          {
            name: 'revenueRecipient',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'price', internalType: 'uint256', type: 'uint256' },
          { name: 'contractUri', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  { type: 'error', inputs: [], name: 'InsufficientFunds' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_contractUri',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'ContractUriSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_JBProjects',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MetadataSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_price',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PriceSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_revenueRecipient',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'RevenueRecipientSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'TransferBatch',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransferSingle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'URI',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_revenueRecipient',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: '_amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Withdrew',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'balanceOfBatch',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'contractURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'projectId', internalType: 'uint256', type: 'uint256' }],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'projectId', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintMany',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'price',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'projects',
    outputs: [
      { name: '', internalType: 'contract IERC721Metadata', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'revenueRecipient',
    outputs: [{ name: '', internalType: 'address payable', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeBatchTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_contractUri', internalType: 'string', type: 'string' }],
    name: 'setContractUri',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_JBProjects', internalType: 'address', type: 'address' }],
    name: 'setMetadata',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_price', internalType: 'uint256', type: 'uint256' }],
    name: 'setPrice',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_revenueRecipient', internalType: 'address', type: 'address' },
    ],
    name: 'setRevenueRecipient',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'projectId', internalType: 'uint256', type: 'uint256' }],
    name: 'uri',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'withdraw',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__.
 */
export function useJbProjectsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: jbProjectsABI,
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useJbProjectsDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jbProjectsABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useJbProjectsBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jbProjectsABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"count"`.
 */
export function useJbProjectsCount<
  TFunctionName extends 'count',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jbProjectsABI,
    functionName: 'count',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"delegates"`.
 */
export function useJbProjectsDelegates<
  TFunctionName extends 'delegates',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jbProjectsABI,
    functionName: 'delegates',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"getApproved"`.
 */
export function useJbProjectsGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jbProjectsABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function useJbProjectsGetPastTotalSupply<
  TFunctionName extends 'getPastTotalSupply',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jbProjectsABI,
    functionName: 'getPastTotalSupply',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function useJbProjectsGetPastVotes<
  TFunctionName extends 'getPastVotes',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jbProjectsABI,
    functionName: 'getPastVotes',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"getVotes"`.
 */
export function useJbProjectsGetVotes<
  TFunctionName extends 'getVotes',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jbProjectsABI,
    functionName: 'getVotes',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useJbProjectsIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jbProjectsABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"metadataContentOf"`.
 */
export function useJbProjectsMetadataContentOf<
  TFunctionName extends 'metadataContentOf',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jbProjectsABI,
    functionName: 'metadataContentOf',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"name"`.
 */
export function useJbProjectsName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jbProjectsABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"nonces"`.
 */
export function useJbProjectsNonces<
  TFunctionName extends 'nonces',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jbProjectsABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"operatorStore"`.
 */
export function useJbProjectsOperatorStore<
  TFunctionName extends 'operatorStore',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jbProjectsABI,
    functionName: 'operatorStore',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"owner"`.
 */
export function useJbProjectsOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jbProjectsABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useJbProjectsOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jbProjectsABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useJbProjectsSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jbProjectsABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"symbol"`.
 */
export function useJbProjectsSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jbProjectsABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useJbProjectsTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jbProjectsABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"tokenUriResolver"`.
 */
export function useJbProjectsTokenUriResolver<
  TFunctionName extends 'tokenUriResolver',
  TSelectData = ReadContractResult<typeof jbProjectsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jbProjectsABI,
    functionName: 'tokenUriResolver',
    ...config,
  } as UseContractReadConfig<typeof jbProjectsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectsABI}__.
 */
export function useJbProjectsWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectsABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof jbProjectsABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof jbProjectsABI, TFunctionName, TMode>({
    abi: jbProjectsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"approve"`.
 */
export function useJbProjectsApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectsABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof jbProjectsABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof jbProjectsABI, 'approve', TMode>({
    abi: jbProjectsABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"createFor"`.
 */
export function useJbProjectsCreateFor<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectsABI,
          'createFor'
        >['request']['abi'],
        'createFor',
        TMode
      > & { functionName?: 'createFor' }
    : UseContractWriteConfig<typeof jbProjectsABI, 'createFor', TMode> & {
        abi?: never
        functionName?: 'createFor'
      } = {} as any,
) {
  return useContractWrite<typeof jbProjectsABI, 'createFor', TMode>({
    abi: jbProjectsABI,
    functionName: 'createFor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"delegate"`.
 */
export function useJbProjectsDelegate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectsABI,
          'delegate'
        >['request']['abi'],
        'delegate',
        TMode
      > & { functionName?: 'delegate' }
    : UseContractWriteConfig<typeof jbProjectsABI, 'delegate', TMode> & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any,
) {
  return useContractWrite<typeof jbProjectsABI, 'delegate', TMode>({
    abi: jbProjectsABI,
    functionName: 'delegate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useJbProjectsDelegateBySig<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectsABI,
          'delegateBySig'
        >['request']['abi'],
        'delegateBySig',
        TMode
      > & { functionName?: 'delegateBySig' }
    : UseContractWriteConfig<typeof jbProjectsABI, 'delegateBySig', TMode> & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any,
) {
  return useContractWrite<typeof jbProjectsABI, 'delegateBySig', TMode>({
    abi: jbProjectsABI,
    functionName: 'delegateBySig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useJbProjectsRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectsABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof jbProjectsABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof jbProjectsABI, 'renounceOwnership', TMode>({
    abi: jbProjectsABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useJbProjectsSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectsABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof jbProjectsABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof jbProjectsABI, 'safeTransferFrom', TMode>({
    abi: jbProjectsABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useJbProjectsSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectsABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof jbProjectsABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof jbProjectsABI, 'setApprovalForAll', TMode>({
    abi: jbProjectsABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"setMetadataOf"`.
 */
export function useJbProjectsSetMetadataOf<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectsABI,
          'setMetadataOf'
        >['request']['abi'],
        'setMetadataOf',
        TMode
      > & { functionName?: 'setMetadataOf' }
    : UseContractWriteConfig<typeof jbProjectsABI, 'setMetadataOf', TMode> & {
        abi?: never
        functionName?: 'setMetadataOf'
      } = {} as any,
) {
  return useContractWrite<typeof jbProjectsABI, 'setMetadataOf', TMode>({
    abi: jbProjectsABI,
    functionName: 'setMetadataOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"setTokenUriResolver"`.
 */
export function useJbProjectsSetTokenUriResolver<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectsABI,
          'setTokenUriResolver'
        >['request']['abi'],
        'setTokenUriResolver',
        TMode
      > & { functionName?: 'setTokenUriResolver' }
    : UseContractWriteConfig<
        typeof jbProjectsABI,
        'setTokenUriResolver',
        TMode
      > & {
        abi?: never
        functionName?: 'setTokenUriResolver'
      } = {} as any,
) {
  return useContractWrite<typeof jbProjectsABI, 'setTokenUriResolver', TMode>({
    abi: jbProjectsABI,
    functionName: 'setTokenUriResolver',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useJbProjectsTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectsABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof jbProjectsABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof jbProjectsABI, 'transferFrom', TMode>({
    abi: jbProjectsABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useJbProjectsTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectsABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof jbProjectsABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof jbProjectsABI, 'transferOwnership', TMode>({
    abi: jbProjectsABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectsABI}__.
 */
export function usePrepareJbProjectsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbProjectsABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: jbProjectsABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbProjectsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareJbProjectsApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbProjectsABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: jbProjectsABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbProjectsABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"createFor"`.
 */
export function usePrepareJbProjectsCreateFor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbProjectsABI, 'createFor'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: jbProjectsABI,
    functionName: 'createFor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbProjectsABI, 'createFor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareJbProjectsDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbProjectsABI, 'delegate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: jbProjectsABI,
    functionName: 'delegate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbProjectsABI, 'delegate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareJbProjectsDelegateBySig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbProjectsABI, 'delegateBySig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: jbProjectsABI,
    functionName: 'delegateBySig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbProjectsABI, 'delegateBySig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareJbProjectsRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbProjectsABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: jbProjectsABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbProjectsABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareJbProjectsSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbProjectsABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: jbProjectsABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbProjectsABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareJbProjectsSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbProjectsABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: jbProjectsABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbProjectsABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"setMetadataOf"`.
 */
export function usePrepareJbProjectsSetMetadataOf(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbProjectsABI, 'setMetadataOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: jbProjectsABI,
    functionName: 'setMetadataOf',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbProjectsABI, 'setMetadataOf'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"setTokenUriResolver"`.
 */
export function usePrepareJbProjectsSetTokenUriResolver(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbProjectsABI, 'setTokenUriResolver'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: jbProjectsABI,
    functionName: 'setTokenUriResolver',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbProjectsABI,
    'setTokenUriResolver'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareJbProjectsTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbProjectsABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: jbProjectsABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbProjectsABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectsABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareJbProjectsTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbProjectsABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: jbProjectsABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbProjectsABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbProjectsABI}__.
 */
export function useJbProjectsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof jbProjectsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: jbProjectsABI,
    ...config,
  } as UseContractEventConfig<typeof jbProjectsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbProjectsABI}__ and `eventName` set to `"Approval"`.
 */
export function useJbProjectsApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof jbProjectsABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: jbProjectsABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof jbProjectsABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbProjectsABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useJbProjectsApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof jbProjectsABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: jbProjectsABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof jbProjectsABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbProjectsABI}__ and `eventName` set to `"Create"`.
 */
export function useJbProjectsCreateEvent(
  config: Omit<
    UseContractEventConfig<typeof jbProjectsABI, 'Create'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: jbProjectsABI,
    eventName: 'Create',
    ...config,
  } as UseContractEventConfig<typeof jbProjectsABI, 'Create'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbProjectsABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function useJbProjectsDelegateChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof jbProjectsABI, 'DelegateChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: jbProjectsABI,
    eventName: 'DelegateChanged',
    ...config,
  } as UseContractEventConfig<typeof jbProjectsABI, 'DelegateChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbProjectsABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function useJbProjectsDelegateVotesChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof jbProjectsABI, 'DelegateVotesChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: jbProjectsABI,
    eventName: 'DelegateVotesChanged',
    ...config,
  } as UseContractEventConfig<typeof jbProjectsABI, 'DelegateVotesChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbProjectsABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useJbProjectsOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof jbProjectsABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: jbProjectsABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof jbProjectsABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbProjectsABI}__ and `eventName` set to `"SetMetadata"`.
 */
export function useJbProjectsSetMetadataEvent(
  config: Omit<
    UseContractEventConfig<typeof jbProjectsABI, 'SetMetadata'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: jbProjectsABI,
    eventName: 'SetMetadata',
    ...config,
  } as UseContractEventConfig<typeof jbProjectsABI, 'SetMetadata'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbProjectsABI}__ and `eventName` set to `"SetTokenUriResolver"`.
 */
export function useJbProjectsSetTokenUriResolverEvent(
  config: Omit<
    UseContractEventConfig<typeof jbProjectsABI, 'SetTokenUriResolver'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: jbProjectsABI,
    eventName: 'SetTokenUriResolver',
    ...config,
  } as UseContractEventConfig<typeof jbProjectsABI, 'SetTokenUriResolver'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbProjectsABI}__ and `eventName` set to `"Transfer"`.
 */
export function useJbProjectsTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof jbProjectsABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: jbProjectsABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof jbProjectsABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectCardsABI}__.
 */
export function useJbProjectCardsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof jbProjectCardsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectCardsABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: jbProjectCardsABI,
    ...config,
  } as UseContractReadConfig<
    typeof jbProjectCardsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useJbProjectCardsBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof jbProjectCardsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectCardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jbProjectCardsABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof jbProjectCardsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"balanceOfBatch"`.
 */
export function useJbProjectCardsBalanceOfBatch<
  TFunctionName extends 'balanceOfBatch',
  TSelectData = ReadContractResult<typeof jbProjectCardsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectCardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jbProjectCardsABI,
    functionName: 'balanceOfBatch',
    ...config,
  } as UseContractReadConfig<
    typeof jbProjectCardsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"contractURI"`.
 */
export function useJbProjectCardsContractUri<
  TFunctionName extends 'contractURI',
  TSelectData = ReadContractResult<typeof jbProjectCardsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectCardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jbProjectCardsABI,
    functionName: 'contractURI',
    ...config,
  } as UseContractReadConfig<
    typeof jbProjectCardsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useJbProjectCardsIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof jbProjectCardsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectCardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jbProjectCardsABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof jbProjectCardsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"owner"`.
 */
export function useJbProjectCardsOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof jbProjectCardsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectCardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jbProjectCardsABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof jbProjectCardsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"price"`.
 */
export function useJbProjectCardsPrice<
  TFunctionName extends 'price',
  TSelectData = ReadContractResult<typeof jbProjectCardsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectCardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jbProjectCardsABI,
    functionName: 'price',
    ...config,
  } as UseContractReadConfig<
    typeof jbProjectCardsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"projects"`.
 */
export function useJbProjectCardsProjects<
  TFunctionName extends 'projects',
  TSelectData = ReadContractResult<typeof jbProjectCardsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectCardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jbProjectCardsABI,
    functionName: 'projects',
    ...config,
  } as UseContractReadConfig<
    typeof jbProjectCardsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"revenueRecipient"`.
 */
export function useJbProjectCardsRevenueRecipient<
  TFunctionName extends 'revenueRecipient',
  TSelectData = ReadContractResult<typeof jbProjectCardsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectCardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jbProjectCardsABI,
    functionName: 'revenueRecipient',
    ...config,
  } as UseContractReadConfig<
    typeof jbProjectCardsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useJbProjectCardsSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof jbProjectCardsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectCardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jbProjectCardsABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof jbProjectCardsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"uri"`.
 */
export function useJbProjectCardsUri<
  TFunctionName extends 'uri',
  TSelectData = ReadContractResult<typeof jbProjectCardsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof jbProjectCardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jbProjectCardsABI,
    functionName: 'uri',
    ...config,
  } as UseContractReadConfig<
    typeof jbProjectCardsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectCardsABI}__.
 */
export function useJbProjectCardsWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectCardsABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof jbProjectCardsABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof jbProjectCardsABI, TFunctionName, TMode>({
    abi: jbProjectCardsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"mint"`.
 */
export function useJbProjectCardsMint<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectCardsABI,
          'mint'
        >['request']['abi'],
        'mint',
        TMode
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<typeof jbProjectCardsABI, 'mint', TMode> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<typeof jbProjectCardsABI, 'mint', TMode>({
    abi: jbProjectCardsABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"mintMany"`.
 */
export function useJbProjectCardsMintMany<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectCardsABI,
          'mintMany'
        >['request']['abi'],
        'mintMany',
        TMode
      > & { functionName?: 'mintMany' }
    : UseContractWriteConfig<typeof jbProjectCardsABI, 'mintMany', TMode> & {
        abi?: never
        functionName?: 'mintMany'
      } = {} as any,
) {
  return useContractWrite<typeof jbProjectCardsABI, 'mintMany', TMode>({
    abi: jbProjectCardsABI,
    functionName: 'mintMany',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useJbProjectCardsRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectCardsABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof jbProjectCardsABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof jbProjectCardsABI, 'renounceOwnership', TMode>(
    {
      abi: jbProjectCardsABI,
      functionName: 'renounceOwnership',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function useJbProjectCardsSafeBatchTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectCardsABI,
          'safeBatchTransferFrom'
        >['request']['abi'],
        'safeBatchTransferFrom',
        TMode
      > & { functionName?: 'safeBatchTransferFrom' }
    : UseContractWriteConfig<
        typeof jbProjectCardsABI,
        'safeBatchTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeBatchTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof jbProjectCardsABI,
    'safeBatchTransferFrom',
    TMode
  >({
    abi: jbProjectCardsABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useJbProjectCardsSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectCardsABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof jbProjectCardsABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof jbProjectCardsABI, 'safeTransferFrom', TMode>({
    abi: jbProjectCardsABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useJbProjectCardsSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectCardsABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof jbProjectCardsABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof jbProjectCardsABI, 'setApprovalForAll', TMode>(
    {
      abi: jbProjectCardsABI,
      functionName: 'setApprovalForAll',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"setContractUri"`.
 */
export function useJbProjectCardsSetContractUri<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectCardsABI,
          'setContractUri'
        >['request']['abi'],
        'setContractUri',
        TMode
      > & { functionName?: 'setContractUri' }
    : UseContractWriteConfig<
        typeof jbProjectCardsABI,
        'setContractUri',
        TMode
      > & {
        abi?: never
        functionName?: 'setContractUri'
      } = {} as any,
) {
  return useContractWrite<typeof jbProjectCardsABI, 'setContractUri', TMode>({
    abi: jbProjectCardsABI,
    functionName: 'setContractUri',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"setMetadata"`.
 */
export function useJbProjectCardsSetMetadata<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectCardsABI,
          'setMetadata'
        >['request']['abi'],
        'setMetadata',
        TMode
      > & { functionName?: 'setMetadata' }
    : UseContractWriteConfig<typeof jbProjectCardsABI, 'setMetadata', TMode> & {
        abi?: never
        functionName?: 'setMetadata'
      } = {} as any,
) {
  return useContractWrite<typeof jbProjectCardsABI, 'setMetadata', TMode>({
    abi: jbProjectCardsABI,
    functionName: 'setMetadata',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"setPrice"`.
 */
export function useJbProjectCardsSetPrice<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectCardsABI,
          'setPrice'
        >['request']['abi'],
        'setPrice',
        TMode
      > & { functionName?: 'setPrice' }
    : UseContractWriteConfig<typeof jbProjectCardsABI, 'setPrice', TMode> & {
        abi?: never
        functionName?: 'setPrice'
      } = {} as any,
) {
  return useContractWrite<typeof jbProjectCardsABI, 'setPrice', TMode>({
    abi: jbProjectCardsABI,
    functionName: 'setPrice',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"setRevenueRecipient"`.
 */
export function useJbProjectCardsSetRevenueRecipient<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectCardsABI,
          'setRevenueRecipient'
        >['request']['abi'],
        'setRevenueRecipient',
        TMode
      > & { functionName?: 'setRevenueRecipient' }
    : UseContractWriteConfig<
        typeof jbProjectCardsABI,
        'setRevenueRecipient',
        TMode
      > & {
        abi?: never
        functionName?: 'setRevenueRecipient'
      } = {} as any,
) {
  return useContractWrite<
    typeof jbProjectCardsABI,
    'setRevenueRecipient',
    TMode
  >({
    abi: jbProjectCardsABI,
    functionName: 'setRevenueRecipient',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useJbProjectCardsTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectCardsABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof jbProjectCardsABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof jbProjectCardsABI, 'transferOwnership', TMode>(
    {
      abi: jbProjectCardsABI,
      functionName: 'transferOwnership',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"withdraw"`.
 */
export function useJbProjectCardsWithdraw<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof jbProjectCardsABI,
          'withdraw'
        >['request']['abi'],
        'withdraw',
        TMode
      > & { functionName?: 'withdraw' }
    : UseContractWriteConfig<typeof jbProjectCardsABI, 'withdraw', TMode> & {
        abi?: never
        functionName?: 'withdraw'
      } = {} as any,
) {
  return useContractWrite<typeof jbProjectCardsABI, 'withdraw', TMode>({
    abi: jbProjectCardsABI,
    functionName: 'withdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectCardsABI}__.
 */
export function usePrepareJbProjectCardsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbProjectCardsABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: jbProjectCardsABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbProjectCardsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareJbProjectCardsMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbProjectCardsABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: jbProjectCardsABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbProjectCardsABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"mintMany"`.
 */
export function usePrepareJbProjectCardsMintMany(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbProjectCardsABI, 'mintMany'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: jbProjectCardsABI,
    functionName: 'mintMany',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbProjectCardsABI, 'mintMany'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareJbProjectCardsRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbProjectCardsABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: jbProjectCardsABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbProjectCardsABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function usePrepareJbProjectCardsSafeBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbProjectCardsABI,
      'safeBatchTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: jbProjectCardsABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbProjectCardsABI,
    'safeBatchTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareJbProjectCardsSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbProjectCardsABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: jbProjectCardsABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbProjectCardsABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareJbProjectCardsSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbProjectCardsABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: jbProjectCardsABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbProjectCardsABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"setContractUri"`.
 */
export function usePrepareJbProjectCardsSetContractUri(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbProjectCardsABI, 'setContractUri'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: jbProjectCardsABI,
    functionName: 'setContractUri',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbProjectCardsABI,
    'setContractUri'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"setMetadata"`.
 */
export function usePrepareJbProjectCardsSetMetadata(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbProjectCardsABI, 'setMetadata'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: jbProjectCardsABI,
    functionName: 'setMetadata',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbProjectCardsABI, 'setMetadata'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"setPrice"`.
 */
export function usePrepareJbProjectCardsSetPrice(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbProjectCardsABI, 'setPrice'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: jbProjectCardsABI,
    functionName: 'setPrice',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbProjectCardsABI, 'setPrice'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"setRevenueRecipient"`.
 */
export function usePrepareJbProjectCardsSetRevenueRecipient(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbProjectCardsABI,
      'setRevenueRecipient'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: jbProjectCardsABI,
    functionName: 'setRevenueRecipient',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbProjectCardsABI,
    'setRevenueRecipient'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareJbProjectCardsTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof jbProjectCardsABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: jbProjectCardsABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof jbProjectCardsABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link jbProjectCardsABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareJbProjectCardsWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof jbProjectCardsABI, 'withdraw'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: jbProjectCardsABI,
    functionName: 'withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof jbProjectCardsABI, 'withdraw'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbProjectCardsABI}__.
 */
export function useJbProjectCardsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof jbProjectCardsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: jbProjectCardsABI,
    ...config,
  } as UseContractEventConfig<typeof jbProjectCardsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbProjectCardsABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useJbProjectCardsApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof jbProjectCardsABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: jbProjectCardsABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof jbProjectCardsABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbProjectCardsABI}__ and `eventName` set to `"ContractUriSet"`.
 */
export function useJbProjectCardsContractUriSetEvent(
  config: Omit<
    UseContractEventConfig<typeof jbProjectCardsABI, 'ContractUriSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: jbProjectCardsABI,
    eventName: 'ContractUriSet',
    ...config,
  } as UseContractEventConfig<typeof jbProjectCardsABI, 'ContractUriSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbProjectCardsABI}__ and `eventName` set to `"MetadataSet"`.
 */
export function useJbProjectCardsMetadataSetEvent(
  config: Omit<
    UseContractEventConfig<typeof jbProjectCardsABI, 'MetadataSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: jbProjectCardsABI,
    eventName: 'MetadataSet',
    ...config,
  } as UseContractEventConfig<typeof jbProjectCardsABI, 'MetadataSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbProjectCardsABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useJbProjectCardsOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof jbProjectCardsABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: jbProjectCardsABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof jbProjectCardsABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbProjectCardsABI}__ and `eventName` set to `"PriceSet"`.
 */
export function useJbProjectCardsPriceSetEvent(
  config: Omit<
    UseContractEventConfig<typeof jbProjectCardsABI, 'PriceSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: jbProjectCardsABI,
    eventName: 'PriceSet',
    ...config,
  } as UseContractEventConfig<typeof jbProjectCardsABI, 'PriceSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbProjectCardsABI}__ and `eventName` set to `"RevenueRecipientSet"`.
 */
export function useJbProjectCardsRevenueRecipientSetEvent(
  config: Omit<
    UseContractEventConfig<typeof jbProjectCardsABI, 'RevenueRecipientSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: jbProjectCardsABI,
    eventName: 'RevenueRecipientSet',
    ...config,
  } as UseContractEventConfig<typeof jbProjectCardsABI, 'RevenueRecipientSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbProjectCardsABI}__ and `eventName` set to `"TransferBatch"`.
 */
export function useJbProjectCardsTransferBatchEvent(
  config: Omit<
    UseContractEventConfig<typeof jbProjectCardsABI, 'TransferBatch'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: jbProjectCardsABI,
    eventName: 'TransferBatch',
    ...config,
  } as UseContractEventConfig<typeof jbProjectCardsABI, 'TransferBatch'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbProjectCardsABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useJbProjectCardsTransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof jbProjectCardsABI, 'TransferSingle'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: jbProjectCardsABI,
    eventName: 'TransferSingle',
    ...config,
  } as UseContractEventConfig<typeof jbProjectCardsABI, 'TransferSingle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbProjectCardsABI}__ and `eventName` set to `"URI"`.
 */
export function useJbProjectCardsUriEvent(
  config: Omit<
    UseContractEventConfig<typeof jbProjectCardsABI, 'URI'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: jbProjectCardsABI,
    eventName: 'URI',
    ...config,
  } as UseContractEventConfig<typeof jbProjectCardsABI, 'URI'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link jbProjectCardsABI}__ and `eventName` set to `"Withdrew"`.
 */
export function useJbProjectCardsWithdrewEvent(
  config: Omit<
    UseContractEventConfig<typeof jbProjectCardsABI, 'Withdrew'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: jbProjectCardsABI,
    eventName: 'Withdrew',
    ...config,
  } as UseContractEventConfig<typeof jbProjectCardsABI, 'Withdrew'>)
}
